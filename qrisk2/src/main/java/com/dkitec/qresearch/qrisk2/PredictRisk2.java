/* 
 * Copyright 2014-5 ClinRisk Ltd.
 * 
 * This file is part of QRISK2-2015 (http://qrisk.org, http://qrisk.org/QRISK2-2015-lgpl-source.tgz).
 * 
 * QRISK2-2015 is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * QRISK2-2015 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with QRISK2-2015.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Additional terms
 *
 * The following disclaimer must be held together with any risk score score generated by this code.  
 * If the score is displayed, then this disclaimer must be displayed or otherwise be made easily accessible, e.g. by a prominent link alongside it.
 *   The initial version of this file, to be found at http://qrisk.org/QRISK2-2015-lgpl-source.tgz, faithfully implements QRISK2-2015.
 *   ClinRisk Ltd. have released this code under the GNU Lesser General Public License to enable others to implement the algorithm faithfully.
 *   However, the nature of the GNU Lesser General Public License is such that we cannot prevent, for example, someone accidentally
 *   altering the coefficients, getting the inputs wrong, or just poor programming.
 *   ClinRisk Ltd. stress, therefore, that it is the responsibility of the end user to check that the source that 
 *   they receive produces the same results as the original code posted at http://qrisk.org/QRISK2-2015-lgpl-source.tgz.
 *   Inaccurate implementations of risk scores can lead to wrong patients being given the wrong treatment.
 * 
 * End of additional terms
 */
/* 
 * Copyright 2017 ClinRisk Ltd. 
 * 
 * This file is part of QRISK3-2017 (https://qrisk.org).
 * 
 * QRISK3-2017 is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * QRISK3-2017 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with QRISK3-2017.  If not, see http://www.gnu.org/licenses/.
 * 
 * Additional terms
 * 
 * The following disclaimer must be held together with any risk score score generated by this code.  
 * If the score is displayed, then this disclaimer must be displayed or otherwise be made easily accessible, e.g. by a prominent link alongside it.
 *   The initial version of this file, to be found at http://svn.clinrisk.co.uk/opensource/qrisk2, faithfully implements QRISK3-2017.
 *   ClinRisk Ltd. have released this code under the GNU Lesser General Public License to enable others to implement the algorithm faithfully.
 *   However, the nature of the GNU Lesser General Public License is such that we cannot prevent, for example, someone accidentally 
 *   altering the coefficients, getting the inputs wrong, or just poor programming.
 *   ClinRisk Ltd. stress, therefore, that it is the responsibility of the end user to check that the source that they receive produces the same 
 *   results as the original code found at https://qrisk.org.
 *   Inaccurate implementations of risk scores can lead to wrong patients being given the wrong treatment.
 * 
 * End of additional terms
 *
 */

package com.dkitec.qresearch.qrisk2;

import com.dkitec.qresearch.common.BmiCalculator;
import com.dkitec.qresearch.common.BmiPredictor;
import com.dkitec.qresearch.common.CV;
import com.dkitec.qresearch.common.CholRatioPredictor;
import com.dkitec.qresearch.common.Input;
import com.dkitec.qresearch.common.SbpPredictor;
import com.dkitec.redwood.api.predict.PredictScript;
import com.fasterxml.jackson.databind.ObjectMapper;

public class PredictRisk2 implements PredictScript {

	public void loadModel(String modelPath) {

	}

	public String predict(String jsonStr) {
		ObjectMapper mapper = new ObjectMapper();

		// 입력변수 초기화
		Input in = null;
		try {
			in = mapper.readValue(jsonStr, Input.class);
		} catch (Exception e1) {
			e1.printStackTrace();
		}

		String errorMsg = cvd_validation(in.getAge(), in.getB_AF(), in.getB_atypicalantipsy(),
				in.getB_corticosteroids(), in.getB_impotence2(), in.getB_migraine(), in.getB_ra(), in.getB_renal(),
				in.getB_semi(), in.getB_sle(), in.getB_treatedhyp(), in.getB_type1(), in.getB_type2(), in.getEthrisk(),
				in.getFh_cvd(), in.getRati(), in.getSbp(), in.getSbps5(), in.getSmoke_cat(), in.getSurv(), in.getTown(),
				in.getGender());
		if (errorMsg.length() > 0) {
			return errorMsg;
		}

		if (in.getHeight() > 0 && in.getWeight() > 0)
			in.setBmi(BmiCalculator.calculate(in.getHeight(), in.getWeight()));
		else
			in.setBmi(BmiPredictor.predict(in.getAge(), in.getB_cvd(), in.getB_treatedhyp(), in.getFh_diab(),
					in.getEthrisk(), in.getSmoke_cat(), in.getGender()));

		if (!CV.d_in_range(in.getBmi(), 20, 40)) {
			errorMsg = "error: bmi must be in range (20,40)\n";
			return errorMsg;
		}

		if (in.getRati() == 0)
			in.setRati(CholRatioPredictor.predict(in.getAge(), in.getB_cvd(), in.getB_treatedhyp(), in.getFh_diab(),
					in.getEthrisk(), in.getSmoke_cat(), in.getGender()));
		if (!CV.d_in_range(in.getRati(), 1, 12)) {
			errorMsg = "error: rati must be in range (1,12)\n";
			return errorMsg;
		}

		if (in.getSbp() == 0)
			in.setSbp(SbpPredictor.predict(in.getAge(), in.getB_cvd(), in.getB_treatedhyp(), in.getFh_diab(),
					in.getEthrisk(), in.getSmoke_cat(), in.getGender()));
		if (!CV.d_in_range(in.getSbp(), 70, 210)) {
			errorMsg = "error: sbp must be in range (70,210)\n";
			return errorMsg;
		}

		double result = cvd(in.getAge(), in.getB_AF(), in.getB_atypicalantipsy(),
				in.getB_corticosteroids(), in.getB_impotence2(), in.getB_migraine(), in.getB_ra(), in.getB_renal(),
				in.getB_semi(), in.getB_sle(), in.getB_treatedhyp(), in.getB_type1(), in.getB_type2(),in.getBmi(), in.getEthrisk(),
				in.getFh_cvd(), in.getRati(), in.getSbp(), in.getSbps5(), in.getSmoke_cat(), in.getSurv(), in.getTown(),
				in.getGender());

		return String.valueOf(result);
	}

	private double cvd_female_raw(int age, int b_AF, int b_ra, int b_renal, int b_treatedhyp, int b_type1, int b_type2,
			double bmi, int ethrisk, int fh_cvd, double rati, double sbp, int smoke_cat, int surv, double town) {

		surv = 10;

		double survivor[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.989747583866119, 0, 0, 0, 0, 0 };

		/* The conditional arrays */

		double Iethrisk[] = { 0, 0, 0.2574099349831925900000000, 0.6129795430571779400000000,
				0.3362159841669621300000000, 0.1512517303224336400000000, -0.1794156259657768100000000,
				-0.3503423610057745400000000, -0.2778372483233216800000000, -0.1592734122665366000000000 };
		double Ismoke[] = { 0, 0.2119377108760385200000000, 0.6618634379685941500000000, 0.7570714587132305600000000,
				0.9496298251457036000000000 };

		/* Applying the fractional polynomial transforms */
		/* (which includes scaling) */

		double dage = age;
		dage = dage / 10;
		double age_2 = dage;
		double age_1 = Math.pow(dage, .5);
		double dbmi = bmi;
		dbmi = dbmi / 10;
		double bmi_2 = Math.pow(dbmi, -2) * Math.log(dbmi);
		double bmi_1 = Math.pow(dbmi, -2);

		/* Centring the continuous variables */

		age_1 = age_1 - 2.086397409439087;
		age_2 = age_2 - 4.353054523468018;
		bmi_1 = bmi_1 - 0.152244374155998;
		bmi_2 = bmi_2 - 0.143282383680344;
		rati = rati - 3.506655454635620;
		sbp = sbp - 125.040039062500000;
		town = town - 0.416743695735931;

		/* Start of Sum */
		double a = 0;

		/* The conditional sums */

		a += Iethrisk[ethrisk];
		a += Ismoke[smoke_cat];

		/* Sum from continuous values */

		a += age_1 * 4.4417863976316578000000000;
		a += age_2 * 0.0281637210672999180000000;
		a += bmi_1 * 0.8942365304710663300000000;
		a += bmi_2 * -6.5748047596104335000000000;
		a += rati * 0.1433900561621420900000000;
		a += sbp * 0.0128971795843613720000000;
		a += town * 0.0664772630011438850000000;

		/* Sum from boolean values */

		a += b_AF * 1.6284780236484424000000000;
		a += b_ra * 0.2901233104088770700000000;
		a += b_renal * 1.0043796680368302000000000;
		a += b_treatedhyp * 0.6180430562788129500000000;
		a += b_type1 * 1.8400348250874599000000000;
		a += b_type2 * 1.1711626412196512000000000;
		a += fh_cvd * 0.5147261203665195500000000;

		/* Sum from interaction terms */

		if (smoke_cat == 1)
			a += age_1 * 0.7464406144391666500000000;
		if (smoke_cat == 2)
			a += age_1 * 0.2568541711879666600000000;
		if (smoke_cat == 3)
			a += age_1 * -1.5452226707866523000000000;
		if (smoke_cat == 4)
			a += age_1 * -1.7113013709043405000000000;
		a += age_1 * b_AF * -7.0177986441269269000000000;
		a += age_1 * b_renal * -2.9684019256454390000000000;
		a += age_1 * b_treatedhyp * -4.2219906452967848000000000;
		a += age_1 * b_type1 * 1.6835769546040080000000000;
		a += age_1 * b_type2 * -2.9371798540034648000000000;
		a += age_1 * bmi_1 * 0.1797196207044682300000000;
		a += age_1 * bmi_2 * 40.2428166760658140000000000;
		a += age_1 * fh_cvd * 0.1439979240753906700000000;
		a += age_1 * sbp * -0.0362575233899774460000000;
		a += age_1 * town * 0.3735138031433442600000000;
		if (smoke_cat == 1)
			a += age_2 * -0.1927057741748231000000000;
		if (smoke_cat == 2)
			a += age_2 * -0.1526965063458932700000000;
		if (smoke_cat == 3)
			a += age_2 * 0.2313563976521429400000000;
		if (smoke_cat == 4)
			a += age_2 * 0.2307165013868296700000000;
		a += age_2 * b_AF * 1.1395776028337732000000000;
		a += age_2 * b_renal * 0.4356963208330940600000000;
		a += age_2 * b_treatedhyp * 0.7265947108887239600000000;
		a += age_2 * b_type1 * -0.6320977766275653900000000;
		a += age_2 * b_type2 * 0.4023270434871086800000000;
		a += age_2 * bmi_1 * 0.1319276622711877700000000;
		a += age_2 * bmi_2 * -7.3211322435546409000000000;
		a += age_2 * fh_cvd * -0.1330260018273720400000000;
		a += age_2 * sbp * 0.0045842850495397955000000;
		a += age_2 * town * -0.0952370300845990780000000;

		/* Calculate the score itself */
		double score = 100.0 * (1 - Math.pow(survivor[surv], Math.exp(a)));
		return score;
	}

	private double cvd_male_raw(int age, int b_AF, int b_ra, int b_renal, int b_treatedhyp, int b_type1, int b_type2,
			double bmi, int ethrisk, int fh_cvd, double rati, double sbp, int smoke_cat, int surv, double town) {
		surv = 10;

		double survivor[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.978794217109680, 0, 0, 0, 0, 0 };

		/* The conditional arrays */

		double Iethrisk[] = { 0, 0, 0.3173321430481919100000000, 0.4738590786081115500000000,
				0.5171314655968145500000000, 0.1370301157366419200000000, -0.3885522304972663900000000,
				-0.3812495485312194500000000, -0.4064461381650994500000000, -0.2285715521377336100000000 };
		double Ismoke[] = { 0, 0.2684479158158020200000000, 0.6307674973877591700000000, 0.7178078883378695700000000,
				0.8704172533465485100000000 };

		/* Applying the fractional polynomial transforms */
		/* (which includes scaling) */

		double dage = age;
		dage = dage / 10;
		double age_1 = Math.pow(dage, -1);
		double age_2 = Math.pow(dage, 2);
		double dbmi = bmi;
		dbmi = dbmi / 10;
		double bmi_2 = Math.pow(dbmi, -2) * Math.log(dbmi);
		double bmi_1 = Math.pow(dbmi, -2);

		/* Centring the continuous variables */

		age_1 = age_1 - 0.233734160661697;
		age_2 = age_2 - 18.304403305053711;
		bmi_1 = bmi_1 - 0.146269768476486;
		bmi_2 = bmi_2 - 0.140587374567986;
		rati = rati - 4.321151256561279;
		sbp = sbp - 130.589752197265620;
		town = town - 0.551009356975555;

		/* Start of Sum */
		double a = 0;

		/* The conditional sums */

		a += Iethrisk[ethrisk];
		a += Ismoke[smoke_cat];

		/* Sum from continuous values */

		a += age_1 * -18.0437312550377270000000000;
		a += age_2 * 0.0236486454254306940000000;
		a += bmi_1 * 2.5388084343581578000000000;
		a += bmi_2 * -9.1034725871528597000000000;
		a += rati * 0.1684397636136909500000000;
		a += sbp * 0.0105003089380754820000000;
		a += town * 0.0323801637634487590000000;

		/* Sum from boolean values */

		a += b_AF * 1.0363048000259454000000000;
		a += b_ra * 0.2519953134791012600000000;
		a += b_renal * 0.8359352886995286000000000;
		a += b_treatedhyp * 0.6603459695917862600000000;
		a += b_type1 * 1.3309170433446138000000000;
		a += b_type2 * 0.9454348892774417900000000;
		a += fh_cvd * 0.5986037897136281500000000;

		/* Sum from interaction terms */

		if (smoke_cat == 1)
			a += age_1 * 0.6186864699379683900000000;
		if (smoke_cat == 2)
			a += age_1 * 1.5522017055600055000000000;
		if (smoke_cat == 3)
			a += age_1 * 2.4407210657517648000000000;
		if (smoke_cat == 4)
			a += age_1 * 3.5140494491884624000000000;
		a += age_1 * b_AF * 8.0382925558108482000000000;
		a += age_1 * b_renal * -1.6389521229064483000000000;
		a += age_1 * b_treatedhyp * 8.4621771382346651000000000;
		a += age_1 * b_type1 * 5.4977016563835504000000000;
		a += age_1 * b_type2 * 3.3974747488766690000000000;
		a += age_1 * bmi_1 * 33.8489881012767600000000000;
		a += age_1 * bmi_2 * -140.6707025404897100000000000;
		a += age_1 * fh_cvd * 2.0858333154353321000000000;
		a += age_1 * sbp * 0.0501283668830720540000000;
		a += age_1 * town * -0.1988268217186850700000000;
		if (smoke_cat == 1)
			a += age_2 * -0.0040893975066796338000000;
		if (smoke_cat == 2)
			a += age_2 * -0.0056065852346001768000000;
		if (smoke_cat == 3)
			a += age_2 * -0.0018261006189440492000000;
		if (smoke_cat == 4)
			a += age_2 * -0.0014997157296173290000000;
		a += age_2 * b_AF * 0.0052471594895864343000000;
		a += age_2 * b_renal * -0.0179663586193546390000000;
		a += age_2 * b_treatedhyp * 0.0092088445323379176000000;
		a += age_2 * b_type1 * 0.0047493510223424558000000;
		a += age_2 * b_type2 * -0.0048113775783491563000000;
		a += age_2 * bmi_1 * 0.0627410757513945650000000;
		a += age_2 * bmi_2 * -0.2382914909385732100000000;
		a += age_2 * fh_cvd * -0.0049971149213281010000000;
		a += age_2 * sbp * -0.0000523700987951435090000;
		a += age_2 * town * -0.0012518116569283104000000;

		/* Calculate the score itself */
		double score = 100.0 * (1 - Math.pow(survivor[surv], Math.exp(a)));
		return score;
	}

	private String cvd_validation(int age, int b_AF, int b_atypicalantipsy, int b_corticosteroids, int b_impotence2,
			int b_migraine, int b_ra, int b_renal, int b_semi, int b_sle, int b_treatedhyp, int b_type1, int b_type2,
			int ethrisk, int fh_cvd, double rati, double sbp, double sbps5, int smoke_cat, int surv, double town,
			int gender) {
		String resultString = "";
		if (!CV.i_in_range(age, 25, 84)) {
			resultString += "error: age must be in range (25,84)\n";
		}
		if (!CV.is_boolean(b_AF)) {
			resultString += "error: b_AF must be in range (0,1)\n";
		}
		if (!CV.is_boolean(b_atypicalantipsy)) {
			resultString += "error: b_atypicalantipsy must be in range (0,1)\n";
		}
		if (!CV.is_boolean(b_corticosteroids)) {
			resultString += "error: b_corticosteroids must be in range (0,1)\n";
		}
		if (!CV.is_boolean(b_impotence2)) {
			resultString += "error: b_corticosteroids must be in range (0,1)\n";
		}
		if (!CV.is_boolean(b_migraine)) {
			resultString += "error: b_migraine must be in range (0,1)\n";
		}
		if (!CV.is_boolean(b_ra)) {
			resultString += "error: b_ra must be in range (0,1)\n";
		}
		if (!CV.is_boolean(b_renal)) {
			resultString += "error: b_renal must be in range (0,1)\n";
		}
		if (!CV.is_boolean(b_semi)) {
			resultString += "error: b_semi must be in range (0,1)\n";
		}
		if (!CV.is_boolean(b_sle)) {
			resultString += "error: b_sle must be in range (0,1)\n";
		}
		if (!CV.is_boolean(b_treatedhyp)) {
			resultString += "error: b_treatedhyp must be in range (0,1)\n";
		}
		if (!CV.is_boolean(b_type1)) {
			resultString += "error: b_type1 must be in range (0,1)\n";
		}
		if (!CV.is_boolean(b_type2)) {
			resultString += "error: b_type2 must be in range (0,1)\n";
		}
		if (!CV.i_in_range(ethrisk, 1, 9)) {
			resultString += "error: ethrisk must be in range (1,9)\n";
		}
		if (!CV.is_boolean(fh_cvd)) {
			resultString += "error: fh_cvd must be in range (0,1)\n";
		}
		if (rati != 0 && !CV.d_in_range(rati, 1.0, 11.0)) {
			resultString += "error: rati must be in range (1.0,11.0)\n";
		}
		if (sbp != 0 && !CV.d_in_range(sbp, 70, 210)) {
			resultString += "error: sbp must be in range (70,210)\n";
		}
		if (!CV.d_in_range(sbps5, 0, 40.0)) {
			resultString += "error: sbps5 must be in range (0,40.0)\n";
		}
		if (!CV.i_in_range(smoke_cat, 0, 4)) {
			resultString += "error: smoke_cat must be in range (0,4)\n";
		}
		if (surv != 10) {
			resultString += "error: surv must be 10\n";
		}
		if (!CV.d_in_range(town, -7, 11)) {
			resultString += "error: town must be in range (-7,11)\n";
		}
		if (!CV.is_boolean(gender)) {
			resultString += "error: b_cvd must be in range (0,1)\n";
		}

		return resultString;
	}

	private double cvd(int age, int b_AF, int b_atypicalantipsy, int b_corticosteroids, int b_impotence2,
			int b_migraine, int b_ra, int b_renal, int b_semi, int b_sle, int b_treatedhyp, int b_type1, int b_type2,
			double bmi, int ethrisk, int fh_cvd, double rati, double sbp, double sbps5, int smoke_cat, int surv,
			double town, int gender) {

		if (gender == 0)
			return cvd_female_raw(age, b_AF, b_atypicalantipsy, b_corticosteroids, b_migraine, b_ra, b_renal, b_semi,
					b_sle, b_treatedhyp, b_type1, b_type2, bmi, ethrisk, fh_cvd, rati, sbp, sbps5, smoke_cat, surv,
					town);
		else
			return cvd_male_raw(age, b_AF, b_atypicalantipsy, b_corticosteroids, b_impotence2, b_migraine, b_ra, b_renal, b_semi,
					b_sle, b_treatedhyp, b_type1, b_type2, bmi, ethrisk, fh_cvd, rati, sbp, sbps5, smoke_cat, surv,
					town);
	}

	private double cvd_female_raw(int age, int b_AF, int b_atypicalantipsy, int b_corticosteroids, int b_migraine,
			int b_ra, int b_renal, int b_semi, int b_sle, int b_treatedhyp, int b_type1, int b_type2, double bmi,
			int ethrisk, int fh_cvd, double rati, double sbp, double sbps5, int smoke_cat, int surv, double town) {
		double survivor[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.988876402378082, 0, 0, 0, 0, 0 };

		/* The conditional arrays */

		double Iethrisk[] = { 0, 0, 0.2804031433299542500000000, 0.5629899414207539800000000,
				0.2959000085111651600000000, 0.0727853798779825450000000, -0.1707213550885731700000000,
				-0.3937104331487497100000000, -0.3263249528353027200000000, -0.1712705688324178400000000 };
		double Ismoke[] = { 0, 0.1338683378654626200000000, 0.5620085801243853700000000, 0.6674959337750254700000000,
				0.8494817764483084700000000 };

		/* Applying the fractional polynomial transforms */
		/* (which includes scaling) */

		double dage = age;
		dage = dage / 10;
		double age_1 = Math.pow(dage, -2);
		double age_2 = dage;
		double dbmi = bmi;
		dbmi = dbmi / 10;
		double bmi_1 = Math.pow(dbmi, -2);
		double bmi_2 = Math.pow(dbmi, -2) * Math.log(dbmi);

		/* Centring the continuous variables */

		age_1 = age_1 - 0.053274843841791;
		age_2 = age_2 - 4.332503318786621;
		bmi_1 = bmi_1 - 0.154946178197861;
		bmi_2 = bmi_2 - 0.144462317228317;
		rati = rati - 3.476326465606690;
		sbp = sbp - 123.130012512207030;
		sbps5 = sbps5 - 9.002537727355957;
		town = town - 0.392308831214905;

		/* Start of Sum */
		double a = 0;

		/* The conditional sums */

		a += Iethrisk[ethrisk];
		a += Ismoke[smoke_cat];

		/* Sum from continuous values */

		a += age_1 * -8.1388109247726188000000000;
		a += age_2 * 0.7973337668969909800000000;
		a += bmi_1 * 0.2923609227546005200000000;
		a += bmi_2 * -4.1513300213837665000000000;
		a += rati * 0.1533803582080255400000000;
		a += sbp * 0.0131314884071034240000000;
		a += sbps5 * 0.0078894541014586095000000;
		a += town * 0.0772237905885901080000000;

		/* Sum from boolean values */

		a += b_AF * 1.5923354969269663000000000;
		a += b_atypicalantipsy * 0.2523764207011555700000000;
		a += b_corticosteroids * 0.5952072530460185100000000;
		a += b_migraine * 0.3012672608703450000000000;
		a += b_ra * 0.2136480343518194200000000;
		a += b_renal * 0.6519456949384583300000000;
		a += b_semi * 0.1255530805882017800000000;
		a += b_sle * 0.7588093865426769300000000;
		a += b_treatedhyp * 0.5093159368342300400000000;
		a += b_type1 * 1.7267977510537347000000000;
		a += b_type2 * 1.0688773244615468000000000;
		a += fh_cvd * 0.4544531902089621300000000;

		/* Sum from interaction terms */

		if (smoke_cat == 1)
			a += age_1 * -4.7057161785851891000000000;
		if (smoke_cat == 2)
			a += age_1 * -2.7430383403573337000000000;
		if (smoke_cat == 3)
			a += age_1 * -0.8660808882939218200000000;
		if (smoke_cat == 4)
			a += age_1 * 0.9024156236971064800000000;
		a += age_1 * b_AF * 19.9380348895465610000000000;
		a += age_1 * b_corticosteroids * -0.9840804523593628100000000;
		a += age_1 * b_migraine * 1.7634979587872999000000000;
		a += age_1 * b_renal * -3.5874047731694114000000000;
		a += age_1 * b_sle * 19.6903037386382920000000000;
		a += age_1 * b_treatedhyp * 11.8728097339218120000000000;
		a += age_1 * b_type1 * -1.2444332714320747000000000;
		a += age_1 * b_type2 * 6.8652342000009599000000000;
		a += age_1 * bmi_1 * 23.8026234121417420000000000;
		a += age_1 * bmi_2 * -71.1849476920870070000000000;
		a += age_1 * fh_cvd * 0.9946780794043512700000000;
		a += age_1 * sbp * 0.0341318423386154850000000;
		a += age_1 * town * -1.0301180802035639000000000;
		if (smoke_cat == 1)
			a += age_2 * -0.0755892446431930260000000;
		if (smoke_cat == 2)
			a += age_2 * -0.1195119287486707400000000;
		if (smoke_cat == 3)
			a += age_2 * -0.1036630639757192300000000;
		if (smoke_cat == 4)
			a += age_2 * -0.1399185359171838900000000;
		a += age_2 * b_AF * -0.0761826510111625050000000;
		a += age_2 * b_corticosteroids * -0.1200536494674247200000000;
		a += age_2 * b_migraine * -0.0655869178986998590000000;
		a += age_2 * b_renal * -0.2268887308644250700000000;
		a += age_2 * b_sle * 0.0773479496790162730000000;
		a += age_2 * b_treatedhyp * 0.0009685782358817443600000;
		a += age_2 * b_type1 * -0.2872406462448894900000000;
		a += age_2 * b_type2 * -0.0971122525906954890000000;
		a += age_2 * bmi_1 * 0.5236995893366442900000000;
		a += age_2 * bmi_2 * 0.0457441901223237590000000;
		a += age_2 * fh_cvd * -0.0768850516984230380000000;
		a += age_2 * sbp * -0.0015082501423272358000000;
		a += age_2 * town * -0.0315934146749623290000000;

		/* Calculate the score itself */
		double score = 100.0 * (1 - Math.pow(survivor[surv], Math.exp(a)));
		return score;
	}

	private double cvd_male_raw(int age, int b_AF, int b_atypicalantipsy, int b_corticosteroids, int b_impotence2,
			int b_migraine, int b_ra, int b_renal, int b_semi, int b_sle, int b_treatedhyp, int b_type1, int b_type2,
			double bmi, int ethrisk, int fh_cvd, double rati, double sbp, double sbps5, int smoke_cat, int surv,
			double town) {
		double survivor[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.977268040180206, 0, 0, 0, 0, 0 };

		/* The conditional arrays */

		double Iethrisk[] = { 0, 0, 0.2771924876030827900000000, 0.4744636071493126800000000,
				0.5296172991968937100000000, 0.0351001591862990170000000, -0.3580789966932791900000000,
				-0.4005648523216514000000000, -0.4152279288983017300000000, -0.2632134813474996700000000 };
		double Ismoke[] = { 0, 0.1912822286338898300000000, 0.5524158819264555200000000, 0.6383505302750607200000000,
				0.7898381988185801900000000 };

		/* Applying the fractional polynomial transforms */
		/* (which includes scaling) */

		double dage = age;
		dage = dage / 10;
		double age_1 = Math.pow(dage, -1);
		double age_2 = Math.pow(dage, 3);
		double dbmi = bmi;
		dbmi = dbmi / 10;
		double bmi_2 = Math.pow(dbmi, -2) * Math.log(dbmi);
		double bmi_1 = Math.pow(dbmi, -2);

		/* Centring the continuous variables */

		age_1 = age_1 - 0.234766781330109;
		age_2 = age_2 - 77.284080505371094;
		bmi_1 = bmi_1 - 0.149176135659218;
		bmi_2 = bmi_2 - 0.141913309693336;
		rati = rati - 4.300998687744141;
		sbp = sbp - 128.571578979492190;
		sbps5 = sbps5 - 8.756621360778809;
		town = town - 0.526304900646210;

		/* Start of Sum */
		double a = 0;

		/* The conditional sums */

		a += Iethrisk[ethrisk];
		a += Ismoke[smoke_cat];

		/* Sum from continuous values */

		a += age_1 * -17.8397816660055750000000000;
		a += age_2 * 0.0022964880605765492000000;
		a += bmi_1 * 2.4562776660536358000000000;
		a += bmi_2 * -8.3011122314711354000000000;
		a += rati * 0.1734019685632711100000000;
		a += sbp * 0.0129101265425533050000000;
		a += sbps5 * 0.0102519142912904560000000;
		a += town * 0.0332682012772872950000000;

		/* Sum from boolean values */

		a += b_AF * 0.8820923692805465700000000;
		a += b_atypicalantipsy * 0.1304687985517351300000000;
		a += b_corticosteroids * 0.4548539975044554300000000;
		a += b_impotence2 * 0.2225185908670538300000000;
		a += b_migraine * 0.2558417807415991300000000;
		a += b_ra * 0.2097065801395656700000000;
		a += b_renal * 0.7185326128827438400000000;
		a += b_semi * 0.1213303988204716400000000;
		a += b_sle * 0.4401572174457522000000000;
		a += b_treatedhyp * 0.5165987108269547400000000;
		a += b_type1 * 1.2343425521675175000000000;
		a += b_type2 * 0.8594207143093222100000000;
		a += fh_cvd * 0.5405546900939015600000000;

		/* Sum from interaction terms */

		if (smoke_cat == 1)
			a += age_1 * -0.2101113393351634600000000;
		if (smoke_cat == 2)
			a += age_1 * 0.7526867644750319100000000;
		if (smoke_cat == 3)
			a += age_1 * 0.9931588755640579100000000;
		if (smoke_cat == 4)
			a += age_1 * 2.1331163414389076000000000;
		a += age_1 * b_AF * 3.4896675530623207000000000;
		a += age_1 * b_corticosteroids * 1.1708133653489108000000000;
		a += age_1 * b_impotence2 * -1.5064009857454310000000000;
		a += age_1 * b_migraine * 2.3491159871402441000000000;
		a += age_1 * b_renal * -0.5065671632722369400000000;
		a += age_1 * b_treatedhyp * 6.5114581098532671000000000;
		a += age_1 * b_type1 * 5.3379864878006531000000000;
		a += age_1 * b_type2 * 3.6461817406221311000000000;
		a += age_1 * bmi_1 * 31.0049529560338860000000000;
		a += age_1 * bmi_2 * -111.2915718439164300000000000;
		a += age_1 * fh_cvd * 2.7808628508531887000000000;
		a += age_1 * sbp * 0.0188585244698658530000000;
		a += age_1 * town * -0.1007554870063731000000000;
		if (smoke_cat == 1)
			a += age_2 * -0.0004985487027532612100000;
		if (smoke_cat == 2)
			a += age_2 * -0.0007987563331738541400000;
		if (smoke_cat == 3)
			a += age_2 * -0.0008370618426625129600000;
		if (smoke_cat == 4)
			a += age_2 * -0.0007840031915563728900000;
		a += age_2 * b_AF * -0.0003499560834063604900000;
		a += age_2 * b_corticosteroids * -0.0002496045095297166000000;
		a += age_2 * b_impotence2 * -0.0011058218441227373000000;
		a += age_2 * b_migraine * 0.0001989644604147863100000;
		a += age_2 * b_renal * -0.0018325930166498813000000;
		a += age_2 * b_treatedhyp * 0.0006383805310416501300000;
		a += age_2 * b_type1 * 0.0006409780808752897000000;
		a += age_2 * b_type2 * -0.0002469569558886831500000;
		a += age_2 * bmi_1 * 0.0050380102356322029000000;
		a += age_2 * bmi_2 * -0.0130744830025243190000000;
		a += age_2 * fh_cvd * -0.0002479180990739603700000;
		a += age_2 * sbp * -0.0000127187419158845700000;
		a += age_2 * town * -0.0000932996423232728880000;

		/* Calculate the score itself */
		double score = 100.0 * (1 - Math.pow(survivor[surv], Math.exp(a)));
		return score;
	}

	public static void main(String[] args) {
		String input = "{ \"age\": 47, \"b_AF\": 0, \"b_atypicalantipsy\": 0, \"b_corticosteroids\": 0, \"b_impotence2\": 0, \"b_migraine\": 0,\"b_ra\": 0, \"b_renal\": 0, \"b_semi\": 0, \"b_sle\": 0, \"b_treatedhyp\": 0, \"diabetes_cat\": 0, \"rati\": 2, \"sbp\": 80, \"sbps5\": 35, \"ethrisk\": 8, \"smoke_cat\": 4, \"gender\": 1, \"height\": 178, \"weight\": 78}";
		String input1 = "{ \"age\": 47, \"b_AF\": 0, \"b_atypicalantipsy\": 0, \"b_corticosteroids\": 0, \"b_impotence2\": 0, \"b_migraine\": 0,\"b_ra\": 0, \"b_renal\": 0, \"b_semi\": 0, \"b_sle\": 0, \"b_treatedhyp\": 0, \"diabetes_cat\": 0, \"ethrisk\": 8, \"smoke_cat\": 4, \"gender\": 1}";
		PredictRisk2 pd = new PredictRisk2();
		System.out.println("Json String = " + input);
		System.out.println("result = " + pd.predict(input));
		System.out.println("Json String = " + input1);
		System.out.println("result = " + pd.predict(input1));
	}

}
